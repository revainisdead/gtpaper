Installation Documentation
--------------------------
o) Install PostgreSQL
    - Using PostgreSQL Version 12
    - Includes pgadmin
    - Password: {code: leet!}
    - Port: 5432

o) Using Python 3.8.2
    - Django 2.2

o) Create a virtual environment
    - `py -3.8 -m venv gtpaper-env`
    - gtpaper-env\Scripts\activate

o) Create the project inside of the virtual environment (so the virtual env is not in the repo)
    - `django-admin.py startproject gtpaper`

o) Install libraries
    - `(gtpaper-env) py -m pip3 install django`
    - djang-graphql
    - uwsgi

o) Action item: Store licenses of libraries in folder

o) Control-shift-enter: windows "Run" command as admin...

o) In gtpaper-env folder:
    - `django-admin.py startproject gtpaper`

o) Move some files into directory, .gitignore, README.md, create client folder, etc.


o) Database
    - Add postgres directory to path
    - `psql -U postgres`
    - CREATE DATABASE gtpaper;
    - CREATE USER gtpaper WITH PASSWORD 'gtpaper';
    - GRANT ALL PRIVILEGES ON DATABASE gtpaper TO gtpaper;
    - `psql -U gtpaper`

o) Change settings.py to use database settings

o) Run migrations
    - `py manage.py migrate`

o) Add admin user
    - `py manage.py createsuperuser`
    - Username: admin
    - Password: life6565

o) To log in to admin, had to delete incorrect csrf cookies (don't know why)
    - Find cookies in chrome
    - Delete last couple if they don't look correct
    - Click on ip/host and then click csrftoken and click delete

o) Add GraphQL
    - Install graphene-django
        - In elevated prompt: `(gtpaper-env) pip install graphene-django`
        - Update requirements.txt `pip freeze > requirements.txt`
    - Create a bit of mock data
    - User (front end auth, but still need Users)
    - Post (blob - big large binary object?)
        - pk
        - id (private, unique id, to refer to this, that isn't pk)
        - title
        - body

o) Test
    - `http://localhost:3000/graphql`

o) Fix "AssertionError: Mutation fields must be a mapping (dict / OrderedDict) with field names as keys or a function which returns such a mapping."
    - Don't include Mutation in schema until needed.

o) Create React App
    - `npm uninstall -g create-react-app`
    - `npx create-react-app .`

o) Add libraries
    - `npm install --save react-bootstrap`

o) I forgot to update npx
    - `npm install --global npx --force`

o) Set up scripts the run the server
    - alias workflow: gtp -> gtpact

o) Install Front End dependencies
    - `npm install apollo-boost @apollo/react-hooks graphql`

Odd fix for graphql "ERR! peer dep missing: graph..."
    - npm uninstall graphql... (downgrade)
    - npm uninstall graphql... (downgrade)
    - npm uninstall graphql... (downgrade)
    - `npm list --depth=0` says unmet dependency at version
    - exact version: `npm install graph@^14.3.1`
    - worked: also install typescript
    - `npm install typescript`

o) Csrf header not being added
    - Need to eject apollo boost and use apollo client directly
    - Change
        - from: `import ApolloClient from 'apollo-boost';`
        - to:   `import ApolloClient from 'apollo-client';`

o) Use apollo client
    - `npm install apollo-client apollo-cache-inmemory apollo-link-http apollo-link-error apollo-link graphql-tag`

o) Install react router
    - `npm install react-router-dom`

o) Redux
    - `npm install redux`
    - `npm install react-redux`


o) Can't load html because javascript isn't loaded
    - Why is javascript not loaded: the static js bundle is missing
    - `py manage.py collectstatic`

o) Fix returning html not json bug: add trailing slash


o) Django Rest Framework
    - `pip install djangorestframework`
    - `django-admin startapp restful_api`

o) Forgot url was wrong, and also password...
    - `curl -H "Accept:application/json" -H "X-CSRFToken:8pAteoCdhym3wGeRB3HYxls7H1udIa5qkh9p80dr8gnH1hK2TiL48H6ViVurTa2L" -u admin:life6565 http://127.0.0.1:5000/restful_api/users/`
    - reponse: [{"url":"http://127.0.0.1:5000/restful_api/users/1/","username":"admin","email":"chris.ant.hall@gmail.com","groups":[]}]



To Do
-----
o) Login
    - `http://localhost:3000/accounts/login`
    - All front end pages redirect to login if not signed in

o) Add csrf middleware

o) Instead of using email to login, add google oauth api authentication

o) Goolge oauth token
    - https://console.developers.google.com/
    - Set up google apis account
    - Rename first project to GTPaper-Auth
    - `pip install django-allauth`
